<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Land Records OCR</title>
    <!-- React from CDN + Babel so we can write JSX directly -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script crossorigin src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <style>
      body {
        margin: 0;
        font-family: Arial, sans-serif;
        background: linear-gradient(135deg, #0b0f14, #1a1f29);
        color: #eee;
      }
      .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 24px;
      }
      header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
      }
      .badges span {
        background: #2a3348;
        border-radius: 20px;
        padding: 4px 10px;
        margin-left: 8px;
        font-size: 12px;
      }
      .grid {
        display: grid;
        grid-template-columns: 1fr;
        gap: 16px;
      }
      @media (min-width: 900px) {
        .grid {
          grid-template-columns: 1fr 2fr 1fr;
        }
      }
      .card {
        background: #12161d;
        border: 1px solid #2a3348;
        border-radius: 12px;
        padding: 16px;
      }
      h2 {
        margin-top: 0;
        font-size: 18px;
        margin-bottom: 12px;
      }
      .drop {
        border: 2px dashed #2a3348;
        border-radius: 10px;
        padding: 20px;
        text-align: center;
      }
      .btn {
        background: #5b8def;
        border: none;
        padding: 8px 14px;
        border-radius: 6px;
        color: white;
        cursor: pointer;
        margin-top: 8px;
      }
      .btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
      }
      .btn.secondary {
        background: transparent;
        border: 1px solid #2a3348;
        color: #eee;
      }
      .textarea {
        width: 100%;
        min-height: 300px;
        background: #0b0f14;
        border: 1px solid #2a3348;
        border-radius: 6px;
        color: #eee;
        padding: 10px;
        font-family: monospace;
      }
      .input {
        width: 100%;
        background: #0b0f14;
        border: 1px solid #2a3348;
        border-radius: 6px;
        color: #eee;
        padding: 6px;
        margin-bottom: 10px;
      }
      footer {
        margin-top: 20px;
        font-size: 12px;
        color: #aaa;
      }
    </style>
  </head>
  <body>
    <div id="root"></div>

    <script type="text/babel">
      const { useState, useRef } = React;

      function extractEntitiesFromText(text) {
        if (!text) return { name: "", place: "", date: "" };
        const dateRx = [
          /(\\b\\d{1,2}[\\/-]\\d{1,2}[\\/-]\\d{2,4}\\b)/,
          /(\\b\\d{1,2}[\\.]\\d{1,2}[\\.]\\d{2,4}\\b)/,
        ];
        let date = "";
        for (const rx of dateRx) {
          const m = rx.exec(text);
          if (m && m[1]) {
            date = m[1];
            break;
          }
        }
        const lines = text.split(/\\r?\\n/).map(l => l.trim()).filter(Boolean);
        let name = lines[0] || "";
        let place = lines.find(l => /village|taluk|district/i.test(l)) || "";
        return { name, place, date };
      }

      function downloadText(filename, text) {
        const blob = new Blob([text || ""], { type: "text/plain;charset=utf-8" });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        a.remove();
        URL.revokeObjectURL(url);
      }

      function App() {
        const [file, setFile] = useState(null);
        const [text, setText] = useState("");
        const [entities, setEntities] = useState({ name: "", place: "", date: "" });
        const [edited, setEdited] = useState({ name: "", place: "", date: "" });
        const [status, setStatus] = useState("");
        const inputRef = useRef(null);

        const hasText = text && text.trim().length > 0;

        const onBrowse = () => inputRef.current?.click();
        const onChoose = (e) => {
          const f = e.target.files?.[0];
          if (f) setFile(f);
        };
        const clearAll = () => {
          setFile(null); setText(""); setEntities({ name: "", place: "", date: "" });
          setEdited({ name: "", place: "", date: "" }); setStatus("");
        };

        const callBackend = async () => {
          if (!file) return;
          setStatus("Processing…");
          try {
            const fd = new FormData();
            fd.append("file", file);
            // Change URL if your backend runs on another port
            const res = await fetch("http://127.0.0.1:5000/ocr", { method: "POST", body: fd });
            let data;
            try { data = await res.json(); }
            catch { data = { text: await res.text() }; }
            const ocrText = (data.text || data.ocr || "").toString();
            setText(ocrText);
            const naive = extractEntitiesFromText(ocrText);
            const merged = { 
              name: data.entities?.name || naive.name, 
              place: data.entities?.place || naive.place, 
              date: data.entities?.date || naive.date 
            };
            setEntities(merged);
            setEdited(merged);
            setStatus("Done.");
          } catch (err) {
            console.error(err);
            setStatus("Failed to connect to backend.");
          }
        };

        return (
          <div className="container">
            <header>
              <h1>Land Records OCR</h1>
              <div className="badges">
                <span>Hybrid OCR</span>
                <span>Kannada · Telugu · Tamil · English</span>
              </div>
            </header>

            <div className="grid">
              <div className="card">
                <h2>1) Upload</h2>
                <div className="drop">
                  <button className="btn" onClick={onBrowse}>Browse</button>
                  <input ref={inputRef} type="file" onChange={onChoose} accept=".pdf,.png,.jpg,.jpeg" style={{display:"none"}} />
                  <p>{file ? file.name : "No file chosen"}</p>
                  <button className="btn" onClick={callBackend} disabled={!file}>Process</button>
                  <button className="btn secondary" onClick={clearAll}>Clear</button>
                  <p>{status}</p>
                </div>
              </div>

              <div className="card">
                <h2>2) Processed Text</h2>
                <textarea className="textarea" value={text} onChange={e=>setText(e.target.value)} placeholder="OCR output will appear here"></textarea>
                <button className="btn secondary" onClick={()=>downloadText("ocr_output.txt", text)} disabled={!hasText}>Download .txt</button>
              </div>

              <div className="card">
                <h2>3) Key Fields</h2>
                <label>Name</label>
                <input className="input" value={edited.name} onChange={e=>setEdited(s=>({...s,name:e.target.value}))} placeholder={entities.name || "—"} />
                <label>Place</label>
                <input className="input" value={edited.place} onChange={e=>setEdited(s=>({...s,place:e.target.value}))} placeholder={entities.place || "—"} />
                <label>Date</label>
                <input className="input" value={edited.date} onChange={e=>setEdited(s=>({...s,date:e.target.value}))} placeholder={entities.date || "—"} />
                <button className="btn" onClick={()=>downloadText("land_record_corrected.json", JSON.stringify({original_text:text, corrected:edited}, null, 2))} disabled={!hasText}>Download Corrected JSON</button>
              </div>
            </div>

            <footer>
              Expects backend <code>POST /ocr</code> returning <code>{"{ text, entities }"}</code>.
            </footer>
          </div>
        );
      }

      const root = ReactDOM.createRoot(document.getElementById("root"));
      root.render(<App />);
    </script>
  </body>
</html>
